// Generated by gencpp from file serial_node/my_msg.msg
// DO NOT EDIT!


#ifndef SERIAL_NODE_MESSAGE_MY_MSG_H
#define SERIAL_NODE_MESSAGE_MY_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_node
{
template <class ContainerAllocator>
struct my_msg_
{
  typedef my_msg_<ContainerAllocator> Type;

  my_msg_()
    : gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)  {
    }
  my_msg_(const ContainerAllocator& _alloc)
    : gyro_x(0.0)
    , gyro_y(0.0)
    , gyro_z(0.0)
    , acc_x(0.0)
    , acc_y(0.0)
    , acc_z(0.0)  {
  (void)_alloc;
    }



   typedef float _gyro_x_type;
  _gyro_x_type gyro_x;

   typedef float _gyro_y_type;
  _gyro_y_type gyro_y;

   typedef float _gyro_z_type;
  _gyro_z_type gyro_z;

   typedef float _acc_x_type;
  _acc_x_type acc_x;

   typedef float _acc_y_type;
  _acc_y_type acc_y;

   typedef float _acc_z_type;
  _acc_z_type acc_z;





  typedef boost::shared_ptr< ::serial_node::my_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_node::my_msg_<ContainerAllocator> const> ConstPtr;

}; // struct my_msg_

typedef ::serial_node::my_msg_<std::allocator<void> > my_msg;

typedef boost::shared_ptr< ::serial_node::my_msg > my_msgPtr;
typedef boost::shared_ptr< ::serial_node::my_msg const> my_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_node::my_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_node::my_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_node::my_msg_<ContainerAllocator1> & lhs, const ::serial_node::my_msg_<ContainerAllocator2> & rhs)
{
  return lhs.gyro_x == rhs.gyro_x &&
    lhs.gyro_y == rhs.gyro_y &&
    lhs.gyro_z == rhs.gyro_z &&
    lhs.acc_x == rhs.acc_x &&
    lhs.acc_y == rhs.acc_y &&
    lhs.acc_z == rhs.acc_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_node::my_msg_<ContainerAllocator1> & lhs, const ::serial_node::my_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial_node::my_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_node::my_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_node::my_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_node::my_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_node::my_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_node::my_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_node::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c0239ab8497dbf714abae1bc9165695";
  }

  static const char* value(const ::serial_node::my_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c0239ab8497dbf7ULL;
  static const uint64_t static_value2 = 0x14abae1bc9165695ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_node::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_node/my_msg";
  }

  static const char* value(const ::serial_node::my_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_node::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 gyro_x\n"
"float32 gyro_y\n"
"float32 gyro_z\n"
"float32 acc_x\n"
"float32 acc_y\n"
"float32 acc_z\n"
;
  }

  static const char* value(const ::serial_node::my_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_node::my_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gyro_x);
      stream.next(m.gyro_y);
      stream.next(m.gyro_z);
      stream.next(m.acc_x);
      stream.next(m.acc_y);
      stream.next(m.acc_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct my_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_node::my_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_node::my_msg_<ContainerAllocator>& v)
  {
    s << indent << "gyro_x: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_x);
    s << indent << "gyro_y: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_y);
    s << indent << "gyro_z: ";
    Printer<float>::stream(s, indent + "  ", v.gyro_z);
    s << indent << "acc_x: ";
    Printer<float>::stream(s, indent + "  ", v.acc_x);
    s << indent << "acc_y: ";
    Printer<float>::stream(s, indent + "  ", v.acc_y);
    s << indent << "acc_z: ";
    Printer<float>::stream(s, indent + "  ", v.acc_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_NODE_MESSAGE_MY_MSG_H
